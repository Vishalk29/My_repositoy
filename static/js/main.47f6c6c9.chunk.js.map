{"version":3,"sources":["Component/Card/Card.component.jsx","Component/Card-list/Card-list.component.jsx","Component/SearchBox/SearchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","Monster","id","name","email","CardList","map","SearBox","placeholder","handlechange","type","onChange","App","handleChanges","e","setState","searchfiled","target","value","state","fetch","then","response","json","users","this","filterUser","filter","toLowerCase","includes","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFTC,EAAW,SAAAR,GACtB,OACA,qBAAKC,UAAU,YAAf,SACCD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNVK,G,MAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAX,UAAU,SACRY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwCCG,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAaFC,cAAgB,SAACC,GAAD,OAAQ,EAAKC,SAAS,CAAEC,YAAYF,EAAEG,OAAOC,SAZ3D,EAAKC,MAAQ,CACXlB,QAAS,GACTe,YAAY,KAJF,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEd,QAASuB,S,oBAM9C,WAGA,MAA+BC,KAAKN,MAA7BlB,EAAP,EAAOA,QAASe,EAAhB,EAAgBA,YAGVU,EAAazB,EAAQ0B,QAAO,SAAC1B,GAAD,OAClCA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAI9C,OAFFE,QAAQC,IAAIL,GAGR,sBAAK5B,UAAU,MAAf,UACA,8CACA,cAAC,EAAD,CACAU,YAAY,iBACZC,aAAcgB,KAAKZ,gBAEnB,cAAC,EAAD,CAAUZ,QAASyB,W,GApCPM,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.47f6c6c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.style.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img alt=\"Monster\" src={`https://robohash.org/${props.Monster.id}?set=set2&size=180x180`}/>\r\n    <h2>{props.Monster.name}</h2>\r\n    <p>{props.Monster.email}</p>\r\n  </div>\r\n);\r\n","// Now creating component for feaching data copy from app.js and importing in APP.JS\r\nimport React from \"react\";\r\nimport \"./Card-list.style.css\";\r\nimport { Card} from \"../Card/Card.component\";\r\n\r\nexport const CardList = props => {\r\n  return(\r\n  <div className=\"user-list\">\r\n  {props.Monster.map(Monster => (\r\n    <Card key={Monster.id} Monster={Monster}/>\r\n  ))}\r\n  </div>\r\n  )};\r\n","import React from \"react\";\r\nimport \"./SearchBox.style.css\";\r\n\r\nexport const SearBox = ({ placeholder, handlechange }) => (\r\n  <input\r\n  className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handlechange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {CardList} from \"../src/Component/Card-list/Card-list.component\";\nimport {SearBox} from \"../src/Component/SearchBox/SearchBox.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      Monster: [],\n      searchfiled:\" \",\n    };\n    \n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ Monster: users }));\n  }\n  // CREATING A ARROW FUNCTION\n  handleChanges = (e) =>  this.setState({ searchfiled:e.target.value});\n  \n  \n  render() {\n     \n    // Concept destructure\n  const {Monster ,searchfiled} = this.state;\n\n  // To filering the text what we entering we use filter()and include() method\n  const filterUser = Monster.filter((Monster) => \n  Monster.name.toLowerCase().includes(searchfiled.toLowerCase())\n  );\n  console.log(filterUser);\n\n    return (\n      <div className=\"App\">\n      <h1>Monster Game</h1>\n      <SearBox\n      placeholder=\"Search monster\"\n      handlechange={this.handleChanges}\n      />\n      <CardList Monster={filterUser}/>\n      </div>\n      \n    );\n  }\n}\n\nexport default App; \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}